/*
 * Copyright (c) 2017 ltlollo
 * Licensed under the MIT license <LICENSE-MIT or
 * http://opensource.org/licenses/MIT>. This file may not be copied,
 * modified, or distributed except according to those terms.
 */

#ifndef SPLIB_H
#define SPLIB_H

#include <stdint.h>

typedef uint8_t  u8;
typedef uint64_t u64;
typedef struct {
    u8 fsig;
    u8 ele;
    u8 n;
    u8 m;
    u64 size;
} Info;

#define BUFSIZE 4096
#define FLEN    1024
#define EXT     ".spl"
#define FSIG    0x80
#define MAXNUM  (u8)(0xFFFFFFFFFFFFFFFF)

#ifdef __cplusplus
extern "C" {
#endif

// splitvb(N, PATHS[M], M, IN, RND): splits the IN file in M files such that N
// are needed to recover; the generated files will be named PATHS[0:M);
// the RND file is used to get randomness.
// Returns 0 on sucess
int splitvp(u8, char const* [], u8, const char *, const char *);

// split(N, PATHS[M], M, IN, RND): splits the IN file in M files such that N
// are needed to recover;
// the generated files will be named IN + [0:M) + EXT;
// the RND file is used to get randomness;
// returns 0 on sucess
int split(u8, u8, const char *, const char *);

// join(OUT, PATHS[N], N): joins PATHS[0:N) files in the OUT file as if they
// where generated by split;
// returns 0 on success
int join(const char *, char *const[], u8);

#ifdef __cplusplus
}
#endif

#endif // SPLIB_H
